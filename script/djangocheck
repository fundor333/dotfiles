#!/usr/bin/env python

import datetime
import fileinput
import logging
import os
import socket
import ssl
import time

import emoji
import sys

import requests
from tabulate import tabulate

logger = logging.getLogger("CheckDjango")


class bcolors:
    HEADER = "\033[95m"
    OKBLUE = "\033[94m"
    OKGREEN = "\033[92m"
    WARNING = "\033[93m"
    FAIL = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"
    UNDERLINE = "\033[4m"


def test_host(url, path="/life", dict_out={"status": "alive and kicking"}):
    try:
        r = requests.get(url + path)
    except requests.exceptions.MissingSchema:
        r = requests.get(f"http://{url}{path}")
    if 200 <= r.status_code < 400:
        try:
            if r.json() == dict_out:
                output_strng = [
                    f"{bcolors.OKGREEN}{emoji.emojize(':thumbsup: ', use_aliases=True)}",
                    url,
                    "",
                ]
            else:
                output_strng = [
                    f"{bcolors.FAIL}{emoji.emojize(':cross_mark:', use_aliases=True)}",
                    url,
                    r.json()["status"],
                ]
        except ValueError:
            output_strng = [
                f"{bcolors.FAIL}{emoji.emojize(':cross_mark:', use_aliases=True)}",
                url,
                "",
            ]
    else:
        output_strng = [
            f"{bcolors.FAIL}{emoji.emojize(':cross_mark:', use_aliases=True)}",
            url,
            r.status_code,
        ]
    return output_strng


if __name__ == "__main__":
    headers = ["Ok", "Host", "Message"]
    if len(sys.argv) > 1:
        for e in sys.argv[1:]:
            print(tabulate(test_host(e), headers, tablefmt="pipe"))
    else:
        f = open(os.path.expanduser("~/.djangocheck"), "r", encoding="utf-8")
        end_message = []
        for host in f.readlines():
            host = host.strip()
            end_message.append(test_host(host))
        end_message = sorted(end_message, key=lambda x: x[1])
        print(tabulate(end_message, headers, tablefmt="pipe"))
